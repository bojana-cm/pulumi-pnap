// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package pnap

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Server struct {
	pulumi.CustomResourceState

	Action             pulumi.StringPtrOutput   `pulumi:"action"`
	Cpu                pulumi.StringOutput      `pulumi:"cpu"`
	Description        pulumi.StringPtrOutput   `pulumi:"description"`
	Hostname           pulumi.StringOutput      `pulumi:"hostname"`
	Location           pulumi.StringOutput      `pulumi:"location"`
	Os                 pulumi.StringOutput      `pulumi:"os"`
	PrivateIpAddresses pulumi.StringArrayOutput `pulumi:"privateIpAddresses"`
	PublicIpAddresses  pulumi.StringArrayOutput `pulumi:"publicIpAddresses"`
	Ram                pulumi.StringOutput      `pulumi:"ram"`
	SshKeys            pulumi.StringArrayOutput `pulumi:"sshKeys"`
	Status             pulumi.StringOutput      `pulumi:"status"`
	Storage            pulumi.StringOutput      `pulumi:"storage"`
	Type               pulumi.StringOutput      `pulumi:"type"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil || args.Hostname == nil {
		return nil, errors.New("missing required argument 'Hostname'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Os == nil {
		return nil, errors.New("missing required argument 'Os'")
	}
	if args == nil || args.SshKeys == nil {
		return nil, errors.New("missing required argument 'SshKeys'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &ServerArgs{}
	}
	var resource Server
	err := ctx.RegisterResource("pnap:index/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("pnap:index/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	Action             *string  `pulumi:"action"`
	Cpu                *string  `pulumi:"cpu"`
	Description        *string  `pulumi:"description"`
	Hostname           *string  `pulumi:"hostname"`
	Location           *string  `pulumi:"location"`
	Os                 *string  `pulumi:"os"`
	PrivateIpAddresses []string `pulumi:"privateIpAddresses"`
	PublicIpAddresses  []string `pulumi:"publicIpAddresses"`
	Ram                *string  `pulumi:"ram"`
	SshKeys            []string `pulumi:"sshKeys"`
	Status             *string  `pulumi:"status"`
	Storage            *string  `pulumi:"storage"`
	Type               *string  `pulumi:"type"`
}

type ServerState struct {
	Action             pulumi.StringPtrInput
	Cpu                pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	Hostname           pulumi.StringPtrInput
	Location           pulumi.StringPtrInput
	Os                 pulumi.StringPtrInput
	PrivateIpAddresses pulumi.StringArrayInput
	PublicIpAddresses  pulumi.StringArrayInput
	Ram                pulumi.StringPtrInput
	SshKeys            pulumi.StringArrayInput
	Status             pulumi.StringPtrInput
	Storage            pulumi.StringPtrInput
	Type               pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	Action      *string  `pulumi:"action"`
	Description *string  `pulumi:"description"`
	Hostname    string   `pulumi:"hostname"`
	Location    string   `pulumi:"location"`
	Os          string   `pulumi:"os"`
	SshKeys     []string `pulumi:"sshKeys"`
	Type        string   `pulumi:"type"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	Action      pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Hostname    pulumi.StringInput
	Location    pulumi.StringInput
	Os          pulumi.StringInput
	SshKeys     pulumi.StringArrayInput
	Type        pulumi.StringInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}
